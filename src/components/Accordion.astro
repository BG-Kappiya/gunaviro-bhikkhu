---
interface Props {
  title: string;
}

const { title } = Astro.props as Props;
---

<div class="accordion group relative rounded-md border border-[#CC5500]">
  <button
    class="accordion__button flex w-full flex-1 items-center justify-between gap-2 p-3 text-left font-medium transition hover:text-[#CC5500] sm:px-4"
    type="button"
    id={`${title} accordion menu button`}
    aria-expanded="false"
    aria-controls={`${title} accordion menu content`}
  >
    {title}

    <!-- if using astro and the astro-icon package -->
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      aria-hidden="true"
      class="accordion__chevron h-7 w-7 shrink-0 transition-transform"
    >
      <path d="M6 9l6 6 6-6"></path>
    </svg>
  </button>

  <div
    id={`${title} accordion menu content`}
    aria-labelledby={`${title} accordion menu button`}
    class="accordion__content hidden max-h-0 overflow-hidden px-3 transition-all duration-300 ease-in-out sm:px-4"
  >
    <article class="prose mb-4 mt-1 max-w-full transition-[height]">
      <slot />
    </article>
  </div>
</div>

<script>
  function accordionSetup() {
    const accordionMenus = document.querySelectorAll(".accordion");

    accordionMenus.forEach((accordionMenu) => {
      const accordionButton = accordionMenu.querySelector(".accordion__button");
      const accordionChevron = accordionMenu.querySelector(
        ".accordion__chevron"
      );
      const accordionContent = accordionMenu.querySelector(
        ".accordion__content"
      );

      if (accordionButton && accordionContent && accordionChevron) {
        // Remove any existing event listeners before adding a new one
        const newButton = accordionButton.cloneNode(true);
        accordionButton.replaceWith(newButton);

        newButton.addEventListener("click", (event) => {
          if (!accordionMenu.classList.contains("active")) {
            accordionMenu.classList.add("active");
            newButton.setAttribute("aria-expanded", "true");

            accordionContent.classList.remove("hidden");
            accordionContent.style.maxHeight =
              accordionContent.scrollHeight + "px";
            accordionChevron.classList.add("rotate-180");
          } else {
            accordionMenu.classList.remove("active");
            newButton.setAttribute("aria-expanded", "false");

            accordionContent.style.maxHeight = "0px";
            accordionChevron.classList.remove("rotate-180");

            setTimeout(() => {
              accordionContent.classList.add("hidden");
            }, 300);
          }
          event.preventDefault();
          return false;
        });
      }
    });
  }

  // Initial setup
  accordionSetup();

  // Ensure it re-runs after Astro view transitions
  document.addEventListener("astro:after-swap", accordionSetup);
</script>
